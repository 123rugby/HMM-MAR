# makefile for hidden_state_inference
# designed for linux distributions
#
# Giles Colclough
#
# Principal Usage:
#
#  make test
#  make mex
#  make all
#  make clean
#  make docs
#  make tar
#  make tidy - remove object files

# Be aware: Armadillo suggests that linking to blas and lapack should be done STATICALLY




# Variables for mex file
TARGET   = hidden_state_inference
SRCS     = ./test/$(TARGET)_test.cpp  $(TARGET).cpp
OBJS     = $(SRCS:.cpp=.o)
OPT      = -O0 # -O3
CC       = g++ $(OPT) -march=native
DEBUG    = -DARMA_NO_DEBUG -DNDEBUG # this speeds things up but makes debugging hard. Use -g to help debugging
CFLAGS   = -Wall -c $(DEBUG) 
LFLAGS   = -Wall -larmadillo $(DEBUG) 
INCLUDE  = -I ./ # armadillo header files are in /usr/local/include, symlinked to the homebrew Cellar
LFLAGS_STATIC = -Wall -framework Accelerate $(DEBUG)

BLAS_LIB    = $(MATLAB_DIR)/bin/$(MATLAB_ARCH)/libmwblas.dylib
LAPACK_LIB  = $(MATLAB_DIR)/bin/$(MATLAB_ARCH)/libmwlapack.dylib

MEX         = $(MATLAB_DIR)/bin/mex
MEX_FLAGS   = -v -largeArrayDims
MEX_INCLUDE = -I./ -I/usr/local/include
MEX_LFLAGS  = -Wall $(DEBUG) -L$(ARMADILLO_DIR) $(ARMADILLO_LIB)
MEX_CXXOPT  = CXXOPTIMFLAGS="$(OPT) $(DEBUG)"

ARMA_STATIC = -DARMA_DONT_USE_WRAPPER # to force linking to lapack and blas, with simple inclusion of header files
ARMA_FLAGS  = -DARMA_BLAS_LONG_LONG -DARMA_64BIT_WORD -DARMA_USE_CXX11 # These flags are important to allow armadillo to sync with Matlab

MEX_LFLAGS_STATIC = LINKLIBS='-L$(MATLAB_DIR)/bin/$(MATLAB_ARCH)/ -lmx -lmex -lmat -framework Accelerate'  # LINKLIBS='-L$(MATLAB_DIR)/bin/$(MATLAB_ARCH)/ -lmx -lmex -lmat $(BLAS_LIB) $(LAPACK_LIB)' # - use these to link against matlab intel MKL libraries, not to MacOSX framework Accelerate #

# This line is very machine specific. Try commenting this out, and running mex in verbose mode - it should print out the defaults for your system. Unfortunately, setting this file up to just append to this variable seems impossible.
MEX_CXXFLAG = CXXFLAGS="-fno-common -arch x86_64 -march=native -mmacosx-version-min=10.9 -fexceptions -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX$(MACOS_VERSION).sdk -fobjc-arc -std=c++14 -stdlib=libc++ -Wall"





# What to do on calling make with no arguments
default: all


# Multiple target calls
all: mex test docs tidy


# Executable targets
test: $(OBJS)
	$(CC) $(LFLAGS_STATIC) $(OBJS) -o test $(INCLUDE) $(ARMA_FLAGS)

mex: $(TARGET).o
	$(MEX) ./$(TARGET)_mx.cpp $(TARGET).o $(MEX_FLAGS) $(MEX_CXXOPT) $(MEX_INCLUDE) $(MEX_CXXFLAG) $(ARMA_STATIC) $(MEX_LFLAGS_STATIC) $(ARMA_FLAGS)

# This also works, with no .o file:
#	/Applications/MATLAB_R2015a.app/bin/mex ./$(TARGET)_mx.cpp $(TARGET).cpp -v -largeArrayDims CXXOPTIMFLAGS="-O0"  -I/usr/local/include/ -I./  CXXFLAGS="-fno-common -arch x86_64 -march=native -mmacosx-version-min=10.9 -fexceptions -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk -fobjc-arc -std=c++14 -stdlib=libc++" -DARMA_BLAS_LONG_LONG -I/usr/local/opt/armadillo/lib /usr/local/opt/armadillo/lib/libarmadillo.6.40.3.dylib
# -DARMA_NO_DEBUG CXXOPTIMFLAGS="-O3 -DNDEBUG"
# CXXOPTIMFLAGS="-O0"
# -DARMA_64BIT_WORD -DARMA_NO_WRAPPER


# Object files
$(TARGET)_test.o: $(TARGET).hpp
	$(CC) $(CFLAGS) $(ARMA_FLAGS) $(ARMA_STATIC) ./$(TARGET)_test.cpp $(INCLUDE)

$(TARGET).o: 
	$(CC) $(CFLAGS) $(ARMA_FLAGS) $(ARMA_STATIC) ./$(TARGET).cpp $(INCLUDE)


# Utility functions
docs:
	doxygen $(TARGET).doxy
	$(MAKE) -C latex 

tidy:
	\rm *.o *~ *.tar.gz

clean:
	\rm -r *.o test $(TARGET).tar.gz *.mex* *~  ./latex ./html

tar:
	tar cfv html_doc.tar.gz ./html/*
	tar cfvz $(TARGET).tar.gz makefile ./*.hpp ./*.cpp ./*.mex* ./*.m ./latex/*.pdf ./html_doc.tar.gz ./*.doxy
	rm html_doc.tar.gz
    
#[EOF]
